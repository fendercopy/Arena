<시작 전에>
1. *.uproject 는 엔진 또는 에디터에 대한 설정 파일로 생각 하자
2. *.target.cs 는 프로젝트 빌드 세팅 으로 생각하자
3. *.build.cs 는 모듈의 빌드 세팅으로 생각 하자

<새로운 프로젝트 시작>
1. 요구사항
	a. 프로젝트이름의 독립된 폴더구조
	b. 프로젝트이름/Source : 프로젝트를 구성하는 모든 모듈의 코드 모음
	c. 프로젝트이름/Content : 프로젝트를 구성하는 모든 리소스 모음
	d. 프로젝트이름/Source/프로젝트이름.Target.cs : 어플리케이션 빌드시 빌드 정보
	e. 프로젝트이름/Source/프로젝트이름Editor.Target.cs : 에디터 빌드시 빌드 정보
	f. 프로젝트이름/프로젝트이름.uproject
2. .uproject 파일 생성후 다음 json값을 셋팅한다.
	{ 
	    "FileVersion": 3, 					//필수
	    "EngineAssociation":"4.14",			//필수
	    "Category": "",						//부가
		"Description": ""					//부가
	}
	필수 구성 요소 이므로 위 항목이 없다면 에디터를 시작 할 수 없음, 값이 틀리더라도 unrealversionselector를 통해 올바른 값으로 채워진다.
3. .uproject를 우클릭하여 GenerateProjectFiles 실행 하여 vs솔루션 파일을 만든다.
	(ver 4.18 기준으로 실행시 vs2015 솔루션 파일이 생성 되는데 현재 잘 모르겠음 회피 법으로는 GenerateProjectFiles를 실행 하지 않고 바로 에디터 실행후 엔진 세팅에서 vs2017을 지정후 
	신규 클래스 아무거나 하나 생성하여 모듈을 만들면 2017의 .sin이 생성 된다. 이를 소스콘트롤에 같이 서밋하여 내려 받게 하면 이후 부터는 GenerateProjectFiles를 해도 2017용 *.sin이 유지 됨)
4. 에디터를 한버번이라도 실행 후 다음을 소스콘트롤에 서밋 한다.
	*.uprojec
	*.sin : 3번의 이유로....
	/Source
	/Content
5. GenerateProjectFiles는 UBT를 통해 해당 빌드 플래폼에 맞는 솔루션 파일을 생성 한다. visulstudio, xcode 등등 , 만약 Source 폴더 내부의 구조가 바뀐다거나 코드 파일의 추가 삭제가 있다면 부담없이 눌러줌

<모듈>
1. Source 안에 생성
2. 요구 사항
	a. Source/모듈이름 의 독립된 폴더 구조
	b. Source/모듈이름/모듈이름.h 와 Source/모듈이름/모듈이름.cpp 이는 PCH로 사용
	c. Source/모듈이름/모듈이름.Build.cs 이 모듈의 빌드 정보
3. 언리얼 권장 내부 파일 구조
	a. Source/Classes : UObject를 상속하는 게임 클래스들의 .h
	b. Source/모듈이름/Public : 그 외의 .h
	c. Source/모듈이름/Private : 모든 .cpp
4. 하나의 프로젝트에는 최소한 하나의 주요 모듈이 있어야 하며 이는
	Source/주요모듈이름/주요모듈이름.cpp 안에
	IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, Arena/*주요 모듈 PCH 클래스*/, "Arena" /*주요 모듈 PCH 클래스 이름 스트링*/ );
	매크로로 지정한다.
5. 해당모듈.Build.cs에 dependency 세팅 추가
	PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine" });
6. 해당프로젝트.target.cs , 해당프로젝트Editor.target.cs
	ExtraModuleNames.AddRange( new string[] { "Arena", "WebService" } );
	에 생성한 모듈이름 추가
7. 엔진이 추가된 모듈을 알도록 *.uproject 에 다음을 추가한다
	"Modules": [
	{
		"Name": "Arena",				//필수 : 모듈이름
		"Type": "Runtime",				//필수
		"LoadingPhase": "Default",		//부가 : 확이준
		"AdditionalDependencies": [		//부가 : 의존모듈을 넣어 주는듯 확인중
			"Engine"
		]
	}
8. Development 구성으로 빌드하면 각 모듈 별 DLL로 빌드 되어 바이너리에 들어간다. 엔진은 따로 빌드 되지 않고 에디터는 이 모듈을 로드 할 뿐이다.
9. Shipping 구성으로 빌드 하면 엔진과 모든 포함 모듈이 하나의 실행파일로 정적 빌드 된다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////
	<컴파일>										<엔진 기동>
	(MetaClass)UMyObject의 UClass 클래스  ----> 	UMyObject의 UClass 인스턴스
			^												
			| (by UHT)										
	(source)UMyObject : UObject     ------>         (CDO : Class Default Object)UMyObject의 인스턴스
//////////////////////////////////////////////////////////////////////////////////////////////////////////

<빌드>
1. C++ 컴파일전에 UHT(Unreal Header Tool)이 실행된다
	a. ./InterMediate 안에 언리얼오브젝트의 메타 파일(UClass)이 생성됨

<실행>
1. 엔진 기동시 모든 UClass가 인스턴스됨
2. UClass의 인스턴스로 모든 언리얼 오브젝트가 로드 된다 ???

<.ini>
새 게임플레이 모듈은 UObject 코드를 가질 것이기에, 약간의 환경설정이 필요합니다.
이 세팅을 하지 않아도 에디터를 빌드하고 테스트하는데에는 영향이 없는 것으로 보아 게임 어플리케이션으로 빌드 하거나 쿠킹에 필요한 세팅으로 보입니다.
DefaultEngine.ini 파일의 여러 부분에 모듈을 추가시켜야 합니다:

	a.[UnrealEd.EditorEngine] 섹션의 EditPackages 배열:
	[UnrealEd.EditorEngine]
	+EditPackages=<ModuleName>

	b.[Launch] 섹션:
	[Launch]
	Module=<ModuleName>

	c.[/Script/Engine.UObjectPackages] 섹션의 NativePackages 배열:
	[/Script/Engine.UObjectPackages]
	+NativePackages=<ModuleName>

<디버깅>
1. 빌드옵션
	Development~ : 릴리즈정도
	Shipping~ : Shipping
	Debug~ : Debug

	~Editor
	~Client
	~Server
	x
2. 개발중에 디버그
	Development 나 Debug로 스태틱 빌드를 하면 무조건 cook 완료된 contents를 요구 한다. 아직 회피법을 찾지 못했음...
	일단 방법은 ~Editor로 빌드 한 후에 실행 파라미터로 -Game -Debug 옵션을 주면 에디터에서 "실행"을 누른것과 같이 동작한다. (/WindowsNoEditor 플래폼으로 돌아가는 것으로 보임)
	이상탸에서 vs로 디버깅이 가능 하다. 게임 코드는 그렇다 치는데 엔진도 이방식으로 디버깅이 가능 할지는 모르겠음
	예 )) "$(SolutionDir)$(ProjectName).uproject" /Game/Map/NewMap -skipcompile -game -debug 

